package(default_visibility = ["//visibility:public"])

load("@bazel_tools//tools/cpp:unix_cc_toolchain_config.bzl", "cc_toolchain_config")
cc_toolchain_config(
    name = "nix_toolchain_config",
    cpu = "@ARCH@",
    compiler = "clang",
    toolchain_identifier = "nix_cc_toolchain",
    host_system_name = "local",
    target_system_name = "local",
    target_libc = "unknown",
    abi_version = "unknown",
    abi_libc_version = "unknown",
    tool_paths = {
        "gcc": "@CC_PATH@",
        "cpp": "@CC_PATH@",
        "ar": "@AR_PATH@",
        "ld": "@LD_PATH@",
        "objcopy": "@OBJCOPY_PATH@",
        "objdump": "@OBJDUMP_PATH@",

        "nm": "/bin/false",
        "strip": "/bin/false",
        "llvm-cov": "/bin/false",
        "validate_static_library": "/bin/false",
        "parse_headers": "/bin/false",
    },
    compile_flags = [
        # disable warnings (or errors if -Wall)
        # for using offsetof()
        "-Wno-gnu-offsetof-extensions",
        "-Qunused-arguments"
    ],
    cxx_flags = [
        "-x", "c++",
        # for ppc support
        "-U__LONG_DOUBLE_IEEE128__"
    ],
    link_flags = [
        "-lstdc++", "-lm"
    ],
    cxx_builtin_include_directories = [
        @DEFAULT_INCLUDE_PATHS@
    ],
)

filegroup(name="empty")

cc_toolchain(
    name = "cc_nix_toolchain",
    toolchain_identifier = "nix-toolchain",
    toolchain_config = ":nix_toolchain_config",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
)

cc_toolchain_suite(
    name = "cc_nix_toolchains",
    toolchains = {
        "k8": ":cc_nix_toolchain"
    }
)